/*************************************************************
/IMAGER_v2.0 (2016)
/mainwindow.cpp
/Implementation of Qt objects created by using Qt designer
/Functions known as Slots are autogenerated by Qt
/(not to be modified manually)
/Function implementation is written manually.
/Author: Aamir Abbasi
**************************************************************/
#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    thread = new QThread();
    worker = new LiveThread();
    setWindowFlags(Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint);
    this->setFixedWidth(1200);
    setMouseTracking(true);
}

MainWindow::~MainWindow()
{
    worker->abort();
    thread->wait();
    delete thread;
    delete worker;
    delete ui;
}

//To load the configuration file containing the image save paths list.
void MainWindow::on_Load_Configuration_triggered()
{
    QString filename = QFileDialog::getOpenFileName(
                this,
                tr("Open Configuration File"),
                "C://",
                "Text File (*.txt)");

    pathList = readFile(filename);
}

/// Click this button to acquire a single reference image.
void MainWindow::on_Grab_Single_clicked()    // On the GUI this push button is named as Grab Ref Image
{
    if (pathList.isEmpty()){
        QMessageBox msgBox;
        msgBox.setWindowTitle("Error");
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setText("Configuration file is not loaded");
        msgBox.exec();
        return;
    }
    if (ui->tab_widget->currentIndex() != 0){
        QMessageBox mBox;
        mBox.setWindowTitle("Error");
        mBox.setIcon(QMessageBox::Critical);
        mBox.setText("Select the reference tab and press again");
        mBox.exec();
        return;
    }
    QString mPath = makedir (pathList.at(0));
    exposure = ui->lineEdit_imageParams_exposure->text();
    xBin = ui->lineEdit_imageParameters_xBin->text();
    yBin = ui->lineEdit_imageParameters_yBin->text();
    grabreference(mPath,exposure,xBin,yBin);
}

/// Click this button to perform intrinsic imaging.
void MainWindow::on_Grab_Sequence_clicked()  // On the GUI this push button is named as Start Trials
{

    activeFlag = 1; //Start acquisition of images
    int trialsPerformed;

    if (pathList.isEmpty()){
        QMessageBox msgBox;
        msgBox.setWindowTitle("Error");
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setText("Configuration file is not loaded");
        msgBox.exec();
        return;
    }

    if (ui->tab_widget->currentIndex() == 0){
        QMessageBox mBox;
        mBox.setWindowTitle("Error");
        mBox.setIcon(QMessageBox::Critical);
        mBox.setText("Select the right tab corresponding to the stimulated whisker and press again");
        mBox.exec();
        return;
    }

    if (!(ui->checkBox_sine->isChecked() || ui->checkBox_square->isChecked())){
        QString msg = "Check the waveform box either sine or square.\n";
        QMessageBox errorMBox;
        errorMBox.setWindowTitle("Error");
        errorMBox.setIcon(QMessageBox::Critical);
        errorMBox.setText(msg);
        errorMBox.exec();
        return;
    }

    QString camera_phaseHigh = ui->lineEdit_cameraParams_durationHigh->text();
    QString camera_phaseLow = ui->lineEdit_cameraParams_durationLow->text();

    QString camera_AcqDuration = ui->lineEdit_cameraParams_PreStimDuration->text(); // Now this widget contains total camera acquisition time
    QString camera_preStimDuration = ui->lineEdit_cameraParams_StimPostStimDuration->text();

    QString stimulator_phaseHigh = ui->lineEdit_stimulationParams_durationHigh->text();
    QString stimulator_phaseLow = ui->lineEdit_stimulationParams_durationLow->text();

    QString stimulator_StimDuration = ui->lineEdit_stimulationParams_StimDuration->text();

    QString trialInterval = ui->lineEdit_interTrialInterval->text();
    QString numberOfTrials = ui->lineEdit_numberTrials->text();

    exposure = ui->lineEdit_imageParams_exposure->text();
    xBin = ui->lineEdit_imageParameters_xBin->text();
    yBin = ui->lineEdit_imageParameters_yBin->text();

    QString camera_framerate = ui->lineEdit_cameraParams_FrameRate->text();
    QString stim_rate =  ui->lineEdit_stimulationParams_StimRate->text();

    //Sleep(1000);  // 1s pause to load the parameters in QT varaibles.

    /// Open communication with NSP Blackrock Microsystems.
    if (NSP_On_Open() != 0){
        QString msg = "Check NSP connection\n";
        QMessageBox eMsgBox;
        eMsgBox.setWindowTitle("Error");
        eMsgBox.setIcon(QMessageBox::Critical);
        eMsgBox.setText(msg);
        eMsgBox.exec();
        return;
    }
    //Sleep(1000);

    /// Adjustable acquisition parameters
    //int stimulationReps = stimulator_StimDuration.toInt(nullptr, 10)  * (stim_rate.toInt(nullptr, 10)/2); //reps per second based on the define rate
    //int stimPostStim_CameraTriggReps = camera_StimPostStimDuration.toInt(nullptr, 10) * camera_framerate.toInt(nullptr,10);
    int CameraTriggReps = camera_AcqDuration.toInt(nullptr, 10) * camera_framerate.toInt(nullptr,10); // mulitplied by reps per second
    int stimulationReps = stimulator_StimDuration.toInt(nullptr, 10)  * (stim_rate.toInt(nullptr, 10)); //reps per second based on the defined rate

    int images_persecond = camera_framerate.toInt(nullptr,10);

    /// Initialisation of camera analog waveform
    /// In Samples 3000 = 100ms. Sampling Frequency 30000 Hz
    int nPhase1 = 2;

    UINT16* w1_nDuration;
    w1_nDuration = new UINT16 [nPhase1];

    INT16* w1_nAmplitude;
    w1_nAmplitude = new INT16 [nPhase1];

    for (int i = 0; i < nPhase1; i++)
    {
        if (i % 2 == 0)
        {
            w1_nDuration[i] = camera_phaseHigh.toUInt(nullptr,10) * (30000 / 1000);
            w1_nAmplitude[i] = 32767;
        }
        if (i % 2 == 1)
        {
            w1_nDuration[i] = camera_phaseLow.toUInt(nullptr,10) * (30000 / 1000);
            w1_nAmplitude[i] = 0;
        }
    }

    /// Initialisation of piezo analog waveform
    int nPhase2 = 2;

    UINT16* w2_nDuration;
    w2_nDuration = new UINT16 [nPhase2];

    INT16* w2_nAmplitude;
    w2_nAmplitude = new INT16 [nPhase2];

    /// Previous defination of pizeo stimulation square waveform when using blackrock NSP to control the piezo.
    int counter = 0;
    for (int j = 0; j < nPhase2; j++)
    {
        if (j % 2 == 0)
        {
            counter += 1;
            w2_nDuration[j] = stimulator_phaseHigh.toUInt(nullptr, 10) * (30000 / 1000);
            w2_nAmplitude[j] = 9000; //16384;//32767;9000;
        }
        if (j % 2 == 1)
        {
            w2_nDuration[j] = stimulator_phaseLow.toUInt(nullptr, 10) * (30000 / 1000);
            w2_nAmplitude[j] = -9000 ; //16384;// -32767;9000;
        }
    }

    /// Defination of ramp-plateau-ramp piezo waveform with 1ms up and 1ms down ramp and a user defined plateau duration.
    /*INT16 rampUpVoltage = 3000;
    INT16 deltaVoltage = 1500;

    INT16 rampDownVoltage = 30000;

    for (int j = 0; j < nPhase2; j++)
    {
        if (j < 19)
        {
            w2_nDuration[j] = 0.5 * (30000 / 1000);
            w2_nAmplitude[j] = rampUpVoltage;
            rampUpVoltage += deltaVoltage;
        }

        if (j == 19)
        {
            w2_nDuration[j] = stimulator_phaseHigh.toUInt(nullptr,10) * (30000 / 1000);
            w2_nAmplitude[j] = 32767;
        }

        if (j > 19 && j < 39)
        {
            w2_nDuration[j] = 0.5 * (30000 / 1000);
            w2_nAmplitude[j] = rampDownVoltage;
            rampDownVoltage -= deltaVoltage;
        }

        if (j == 39)
        {
            w2_nDuration[j] = stimulator_phaseLow.toUInt(nullptr,10) * (30000 / 1000);
            w2_nAmplitude[j] = 0;
        }

        if (j > 39 && j < 59)
        {
            w2_nDuration[j] = 0.5 * (30000 / 1000);
            w2_nAmplitude[j] = (-1)*rampDownVoltage;
            rampDownVoltage += deltaVoltage;
        }

        if (j == 59)
        {
            w2_nDuration[j] = stimulator_phaseHigh.toUInt(nullptr,10) * (30000 / 1000);
            w2_nAmplitude[j] = -32767;
        }

        if (j > 59 && j < 79)
        {
            w2_nDuration[j] = 0.5 * (30000 / 1000);
            w2_nAmplitude[j] = (-1)* rampUpVoltage;
            rampUpVoltage -= deltaVoltage;
        }

        if (j == 79)
        {
            w2_nDuration[j] = stimulator_phaseLow.toUInt(nullptr,10) * (30000 / 1000);
            w2_nAmplitude[j] = 0;
        }
    }*/


    /// Analog/Digital channel number defination
    UINT16 channel_cam = 147; //Analog output channel number on NSP Ch1-145 Ch2-146 Ch3-147 Ch4-148
    UINT16 channel_stim = 148; //Digital output channel number on NSP Dout1-153

    /// Waveform defination
    //cbSdkWaveformData preStim_camera; //= instant_waveform(CameraTriggReps, w1_nDuration, w1_nAmplitude, nPhase1);
    cbSdkWaveformData camera = instant_waveform(CameraTriggReps, w1_nDuration, w1_nAmplitude, nPhase1);
    cbSdkWaveformData stimulator = instant_waveform(stimulationReps, w2_nDuration, w2_nAmplitude, nPhase2);
    cbSdkWaveformData stimulator_sine = sine_waveform(1,stim_rate.toInt(nullptr, 10),w2_nAmplitude[0]);

    QString parameterFilePath;
    int nTrials = numberOfTrials.toInt();
    for (int trial = 0; trial < nTrials; trial++)
    {
        ///Prevent GUI thread from freezing
        QCoreApplication::processEvents();

        ///Display trial number currently being performed
        ui->lcdNumber_forTrials->display(trial+1);

        if (activeFlag == 0){
            trialsPerformed = trial;
            break;
        }

        trialsPerformed = trial+1;

        ///Make a seperate directory to store images for every trial.
        QString path;
        QString modifiedPath;

        if (ui->tab_widget->currentIndex() == 1)
        {
            if(trial==0){
                session_Alpha += 1;
            }
            counter_Alpha += 1;
            path = pathList.at(1);
            if (session_Alpha < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_Alpha).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                ,stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_Alpha < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_Alpha).c_str());
        }

        if (ui->tab_widget->currentIndex() == 2)
        {
            if(trial==0){
                session_A1 += 1;
            }
            counter_A1 += 1;
            path = pathList.at(2);
            if (session_A1 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_A1).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                ,stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_A1 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_A1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 3)
        {
            if(trial==0){
                session_A2 += 1;
            }
            counter_A2 += 1;
            path = pathList.at(3);
            if (session_A2 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_A2).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_A2 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_A2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 4)
        {
            if(trial==0){
                session_A3 += 1;
            }
            counter_A3 += 1;
            path = pathList.at(4);
            if (session_A3 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_A3).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_A3 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_A3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 5)
        {
            if(trial==0){
                session_A4 += 1;
            }
            counter_A4 += 1;
            path = pathList.at(5);
            if (session_A4 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_A4).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_A4 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_A4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 6)
        {
            if(trial==0){
                session_Beta += 1;
            }
            counter_Beta += 1;
            path = pathList.at(6);
            if (session_Beta < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_Beta).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_Beta < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_Beta).c_str());
        }

        if (ui->tab_widget->currentIndex() == 7)
        {
            if(trial==0){
                session_B1 += 1;
            }
            counter_B1 += 1;
            path = pathList.at(7);
            if (session_B1 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_B1).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_B1 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_B1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 8)
        {
            if(trial==0){
                session_B2 += 1;
            }
            counter_B2 += 1;
            path = pathList.at(8);
            if (session_B2 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_B2).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_B2 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_B2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 9)
        {
            if(trial==0){
                session_B3 += 1;
            }
            counter_B3 += 1;
            path = pathList.at(9);
            if (session_B3 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_B3).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_B3 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_B3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 10)
        {
            if(trial==0){
                session_B4 += 1;
            }
            counter_B4 += 1;
            path = pathList.at(10);
            if (session_B4 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_B4).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_B4 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_B4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 11)
        {
            if(trial==0){
                session_Gamma += 1;
            }
            counter_Gamma += 1;
            path = pathList.at(11);
            if (session_Gamma < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_Gamma).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_Gamma < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_Gamma).c_str());
        }

        if (ui->tab_widget->currentIndex() == 12)
        {
            if(trial==0){
                session_C1 += 1;
            }
            counter_C1 += 1;
            path = pathList.at(12);
            if (session_C1 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_C1).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_C1 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_C1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 13)
        {
            if(trial==0){
                session_C2 += 1;
            }
            counter_C2 += 1;
            path = pathList.at(13);
            if (session_C2 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_C2).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                               , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_C2 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_C2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 14)
        {
            if(trial==0){
                session_C3 += 1;
            }
            counter_C3 += 1;
            path = pathList.at(14);
            if (session_C3 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_C3).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_C3 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_C3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 15)
        {
            if(trial==0){
                session_C4 += 1;
            }
            counter_C4 += 1;
            path = pathList.at(15);
            if (session_C4 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_C4).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_C4 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_C4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 16)
        {
            if(trial==0){
                session_Delta += 1;
            }
            counter_Delta += 1;
            path = pathList.at(16);
            if (session_Delta < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_Delta).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_Delta < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_Delta).c_str());
        }

        if (ui->tab_widget->currentIndex() == 17)
        {
            if(trial==0){
                session_D1 += 1;
            }
            counter_D1 += 1;
            path = pathList.at(17);
            if (session_D1 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_D1).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_D1 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_D1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 18)
        {
            if(trial==0){
                session_D2 += 1;
            }
            counter_D2 += 1;
            path = pathList.at(18);
            if (session_D2 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_D2).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_D2 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_D2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 19)
        {
            if(trial==0){
                session_D3 += 1;
            }
            counter_D3 += 1;
            path = pathList.at(19);
            if (session_D3 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_D3).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_D3 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_D3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 20)
        {
            if(trial==0){
                session_D4 += 1;
            }
            counter_D4 += 1;
            path = pathList.at(20);
            if (session_D4 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_D4).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_D4 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_D4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 21)
        {
            if(trial==0){
                session_E1 += 1;
            }
            counter_E1 += 1;
            path = pathList.at(21);
            if (session_E1 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_E1).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_E1 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_E1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 22)
        {
            if(trial==0){
                session_E2 += 1;
            }
            counter_E2 += 1;
            path = pathList.at(22);
            if (session_E2 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_E2).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_E2 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_E2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 23)
        {
            if (trial==0){
                session_E3 += 1;
            }
            counter_E3 += 1;
            path = pathList.at(23);
            if (session_E3 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_E3).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration);
            }
            if (counter_E3 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_E3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 24)
        {
            if(trial == 0){
                session_E4 += 1;
            }
            counter_E4 += 1;
            path = pathList.at(24);
            if (session_E4 < 10){
                path = path.append("Session0");
            }
            else
            {
                path = path.append("Session");
            }
            path = path.append(std::to_string(session_E4).c_str());
            if(trial==0){
                parameterFilePath = makedir(path);
                /// Write acquisition parameters in a text file
                writeParameters(parameterFilePath, camera_phaseHigh, camera_phaseLow,camera_AcqDuration
                                , stimulator_phaseHigh, stimulator_phaseLow, stimulator_StimDuration,
                                trialInterval, exposure, xBin, yBin, stim_rate, camera_framerate, numberOfTrials, camera_preStimDuration );
            }
            if (counter_E4 < 10){
                path = path.append("/Trial0");
            }
            else
            {
                path = path.append("/Trial");
            }
            modifiedPath = path.append(std::to_string(counter_E4).c_str());
        }

        QString imgSeqPath = makedir (modifiedPath);

        int grabresult = grabsequence(imgSeqPath,channel_cam,channel_stim,camera
                                      ,CameraTriggReps
                                      ,exposure, xBin, yBin
                                      ,images_persecond
                                      ,camera_preStimDuration
                                      ,stimulator
                                      ,stimulator_sine, sqWave_flag, sineWave_flag); //                                      ,preStim_camera
        if (grabresult != 0)
        {
            break;
        }

        if (trial != (nTrials - 1))
        {
            Sleep(trialInterval.toUInt(nullptr,10)*1000); // pause between trials in milliseconds
        }
    }
    /// Close the interface with the NSP
    NSP_On_Close();

    ///Trial counters reinitialisation for each whisker
    counter_Alpha = 0;
    counter_A1 = 0;
    counter_A2 = 0;
    counter_A3 = 0;
    counter_A4 = 0;
    counter_Beta = 0;
    counter_B1 = 0;
    counter_B2 = 0;
    counter_B3 = 0;
    counter_B4 = 0;
    counter_Gamma = 0;
    counter_C1 = 0;
    counter_C2 = 0;
    counter_C3 = 0;
    counter_C4 = 0;
    counter_Delta = 0;
    counter_D1 = 0;
    counter_D2 = 0;
    counter_D3 = 0;
    counter_D4 = 0;
    counter_E1 = 0;
    counter_E2 = 0;
    counter_E3 = 0;
    counter_E4 = 0;
}

void MainWindow::on_Stop_Trials_clicked()
{
    activeFlag = 0; //Stop acquisition of images
}

void MainWindow::on_Calibrate_camera_clicked()
{
    if (pathList.isEmpty()){
        QMessageBox msgBox;
        msgBox.setWindowTitle("Error");
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setText("Configuration file is not loaded");
        msgBox.exec();
        return;
    }

    QString mPath = makedir (pathList.at(0));

    // Pylon runtime initialization.
    PylonInitialize();

    try
    {
        // Create an instant camera object with the camera device found first.
        CInstantCamera camera(CTlFactory::GetInstance().CreateFirstDevice());

        // The parameter MaxNumBuffer can be used to control the count of buffers
        // allocated for grabbing. The default value of this parameter is 10.
        camera.MaxNumBuffer = 10;

        // Open the camera.
        camera.Open();

        // This smart pointer will receive the grab result data.
        CGrabResultPtr ptrGrabResult;

        // Change image bit depth to 12bits from default 8bits.
        GenApi::INodeMap& nodemap = camera.GetNodeMap();
        CEnumerationPtr pixelFormat ( nodemap.GetNode("PixelFormat"));
        pixelFormat->FromString("Mono12");

        // Set camera exposure mode to timed with exposure time equal to camera trigger width
        CEnumerationPtr exposureMode ( nodemap.GetNode("ExposureMode"));
        exposureMode->FromString("Timed");
        CFloatPtr exposureTime (nodemap.GetNode("ExposureTime"));
        exposureTime->SetValue(exposure.toFloat() * 1000.0);

        // Set horizontal and vertical bin size for binning the image
        CIntegerPtr horizontalBin (nodemap.GetNode("BinningHorizontal"));
        horizontalBin->SetValue(xBin.toInt(nullptr, 10));
        CIntegerPtr verticalBin (nodemap.GetNode("BinningVertical"));
        verticalBin->SetValue(yBin.toInt(nullptr, 10));

        // Set camera gain and black level
        CFloatPtr gain (nodemap.GetNode("Gain"));
        gain->SetValue(0.00);
        CFloatPtr blackLevel (nodemap.GetNode("BlackLevel"));
        blackLevel->SetValue(0.00);

        // Deactivate trigger.
        CEnumerationPtr triggerMode( nodemap.GetNode("TriggerMode"));
        triggerMode->FromString( "Off");

        // Wait for an image and then retrieve it. A timeout of 5000 ms is used.
        camera.GrabOne(5000, ptrGrabResult, TimeoutHandling_ThrowException);

        // Image grabbed successfully?
        if (ptrGrabResult->GrabSucceeded())
        {
            // Save the image data.
            const char *imgsavename = "image_calibration.tiff";
            QString fname = mPath.append(imgsavename);
            CImagePersistence::Save(ImageFileFormat_Tiff, fname.toStdString().c_str(), ptrGrabResult);

        }
        else
        {
            // Print the error message in a QT Message Box
            QString msg = "Grab unsuccessful\n";
            QMessageBox errorMBox;
            errorMBox.setWindowTitle("Error");
            errorMBox.setIcon(QMessageBox::Critical);
            errorMBox.setText(msg.append(ptrGrabResult->GetErrorDescription()));
            errorMBox.exec();
        }
    }
    catch (const GenericException &e)
    {
        // Error handling.
        // Print the error message in a QT Message Box
        QString msg = "An exception has occurred.\n";
        QMessageBox errorMBox;
        errorMBox.setWindowTitle("Error");
        errorMBox.setIcon(QMessageBox::Critical);
        errorMBox.setText(msg.append(e.GetDescription()));
        errorMBox.exec();
    }

    // Releases all pylon resources.
    PylonTerminate();
}

void MainWindow::on_Start_Live_clicked()
{
    exposure = ui->lineEdit_imageParams_exposure->text();
    xBin = ui->lineEdit_imageParameters_xBin->text();
    yBin = ui->lineEdit_imageParameters_yBin->text();
    qDebug() << exposure;
    qDebug() << xBin;
    qDebug() << yBin;
    qDebug()<< "Start Live Clicked";
    worker->abort();
    thread->wait(); // If the thread is not running, this will immediately return.

    worker->requestWork();
}

void MainWindow::on_Stop_Live_clicked()
{
    qDebug()<< "Stop Live Clicked";
    worker->abort();
}

void MainWindow::on_test_piezo_clicked()
{
    NSP_On_Open();

    if (!(ui->checkBox_sine->isChecked() || ui->checkBox_square->isChecked())){
        QString msg = "Check the waveform box either sine or square.\n";
        QMessageBox errorMBox;
        errorMBox.setWindowTitle("Error");
        errorMBox.setIcon(QMessageBox::Critical);
        errorMBox.setText(msg);
        errorMBox.exec();
        return;
    }

    QString stimulator_phaseHigh = ui->lineEdit_stimulationParams_durationHigh->text();
    QString stimulator_phaseLow = ui->lineEdit_stimulationParams_durationLow->text();
    QString stim_rate =  ui->lineEdit_stimulationParams_StimRate->text();

    QString stimulator_StimDuration = ui->lineEdit_stimulationParams_StimDuration->text();
    ///QString numberOfTrials = 5; //ui->lineEdit_numberTrials->text();

    /// Initialisation of piezo analog waveform
    int nPhase2 = 2;

    UINT16* w2_nDuration;
    w2_nDuration = new UINT16 [nPhase2];

    INT16* w2_nAmplitude;
    w2_nAmplitude = new INT16 [nPhase2];

    /// Defination of pizeo stimulation square waveform when using blackrock NSP to control the piezo.
    int stimulationReps = stimulator_StimDuration.toInt(nullptr, 10)  * (stim_rate.toInt(nullptr, 10)); //reps per second based on the defined rate
    int counter = 0;
    for (int j = 0; j < nPhase2; j++)
    {
        if (j % 2 == 0)
        {
            counter += 1;
            w2_nDuration[j] = stimulator_phaseHigh.toUInt(nullptr, 10) * (30000 / 1000);
            w2_nAmplitude[j] =  9000;//16500;//32767;
        }
        if (j % 2 == 1)
        {
            w2_nDuration[j] = stimulator_phaseLow.toUInt(nullptr, 10) * (30000 / 1000);
            w2_nAmplitude[j] = -9000;//16500;// -32767;
        }
    }

    /// Analog channel number for stimulation waveform
    UINT16 channel_stim = 148;

    /// Waveforms defination
    cbSdkWaveformData Stim_stimulator = instant_waveform(stimulationReps, w2_nDuration, w2_nAmplitude, nPhase2);
    cbSdkWaveformData stimulator_sine = sine_waveform(1,stim_rate.toInt(nullptr, 10),32767);
    qDebug() << stim_rate.toInt(nullptr, 10);

    int nTrials = 5; //numberOfTrials.toInt();

    for (int i=0; i<nTrials ; i++){

        /// Send analog waveform 2 for stimulator TTL
        if (sqWave_flag == 1 && sineWave_flag == 0){
            cbSdkResult res2 = NSP_AnalogOut(Stim_stimulator, channel_stim); // Waveform to trigger the whisker stimulator

            /// Error handling.
            if (res2 != 0)
            {
                QString msg = "Stimulator waveform not generated ";
                QMessageBox eMsgBox;
                eMsgBox.setWindowTitle("Error");
                eMsgBox.setIcon(QMessageBox::Critical);
                eMsgBox.setText(msg);
                eMsgBox.exec();
                return;
            }
        }

        if (sqWave_flag == 0 && sineWave_flag == 1){

            cbSdkResult res2 = NSP_AnalogOut(stimulator_sine, channel_stim); // Waveform to trigger the whisker stimulator
            /// Error handling.
            if (res2 != 0)
            {
                QString msg = "Stimulator waveform not generated ";
                QMessageBox eMsgBox;
                eMsgBox.setWindowTitle("Error");
                eMsgBox.setIcon(QMessageBox::Critical);
                eMsgBox.setText(msg);
                eMsgBox.exec();
                return;
            }
        }
        Sleep(2000);
    }
    NSP_On_Close();
}

void MainWindow::on_pushButton_savePath_clicked()
{
    QString rootname = ui->lineEdit_savePath->text();
    makedir(rootname);
    QString rootfilename = genConfigFile(rootname);
    pathList = readFile(rootfilename);
}

void MainWindow::on_Test_LED_clicked()
{
    NSP_On_Open();
    NSP_DigitalOut(153, 1);
}

void MainWindow::on_Test_LED_toggled(bool checked)
{
    if (checked){
        qDebug() << "checked";
        NSP_On_Open();
        NSP_DigitalOut(153, 1);
    }
    else {
        qDebug() << "not checked";
        NSP_DigitalOut(153, 0);
    }
}

void MainWindow::on_checkBox_square_toggled(bool checked)
{
    if (checked){
        qDebug() << "checked";
        if(ui->checkBox_sine->isChecked()){
            ui->checkBox_sine->toggle();
        }
        sqWave_flag = 1;
        sineWave_flag = 0;
    }
    else {
        qDebug() << "not checked";
        sqWave_flag = 0;
    }
}

void MainWindow::on_checkBox_sine_toggled(bool checked)
{
    if (checked){
        if(ui->checkBox_square->isChecked()){
            ui->checkBox_square->toggle();
        }
        qDebug() << "checked";
        sqWave_flag = 0;
        sineWave_flag = 1;
    }
    else {
        qDebug() << "not checked";
        sineWave_flag = 0;
    }
}
