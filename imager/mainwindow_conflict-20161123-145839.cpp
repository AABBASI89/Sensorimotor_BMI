/*************************************************************
/IMAGER (2016)
/mainwindow.cpp
/Implementation of Qt objects created using Qt designer
/Functions known as Slots are autogenerated by Qt
/(not to be modified manually)
/Function implementation is written manually.
/Author: Aamir Abbasi
**************************************************************/
#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    setWindowFlags(Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint);
    ui->progressBar_numberTrials->setMaximum(0);
    ui->progressBar_numberTrials->setMinimum(100);
}

MainWindow::~MainWindow()
{
    worker->abort();
    thread->wait();
    delete thread;
    delete worker;
    delete ui;
}

//To load the configuration file containing the image save paths list.
void MainWindow::on_Load_Configuration_triggered()
{
    QString filename = QFileDialog::getOpenFileName(
                this,
                tr("Open Configuration File"),
                "C://",
                "Text File (*.txt)");

    pathList = readFile(filename);
}

// Click this button to acquire a single reference image.
void MainWindow::on_Grab_Single_clicked()    // On the GUI this push button is named as Grab Ref Image
{
    if (pathList.isEmpty()){
        QMessageBox msgBox;
        msgBox.setWindowTitle("Error");
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setText("Configuration file is not loaded");
        msgBox.exec();
        return;
    }
    if (ui->tab_widget->currentIndex() != 0){
        QMessageBox mBox;
        mBox.setWindowTitle("Error");
        mBox.setIcon(QMessageBox::Critical);
        mBox.setText("Select the reference tab and press again");
        mBox.exec();
        return;
    }
    QString mPath = makedir (pathList.at(0));
    grabreference(mPath);
}

// Click this button perform intrinsic imaging.
void MainWindow::on_Grab_Sequence_clicked()  // On the GUI this push button is named as Start Trials
{

    QString phaseCamera = ui->lineEdit_phase_camera->text();
    QString durationHighCamera = ui->lineEdit_durationHigh_camera->text();
    QString amplitudeHighCamera = ui->lineEdit_amplitudeHigh_camera->text();
    QString durationLowCamera = ui->lineEdit_durationLow_camera->text();
    QString amplitudeLowCamera = ui->lineEdit_amplitudeLow_camera->text();

    QString phaseStimulator = ui->lineEdit_phase_stimulator->text();
    QString durationHighStimulator = ui->lineEdit_durationHigh_stimulator->text();
    QString amplitudeHighStimulator = ui->lineEdit_amplitudeHigh_stimulator->text();
    QString durationLowStimulator = ui->lineEdit_durationLow_stimulator->text();
    QString amplitudeLowStimulator = ui->lineEdit_durationLow_stimulator->text();
    QString amplitudeNegHighStimulator = ui->lineEdit_amplitudeNegHigh_stimulator->text();
    ui->lineEdit_durationNegHigh_stimulator->setText(durationHighStimulator);

    QString numberOfTrials = ui->lineEdit_numberTrials->text();
    ui->progressBar_numberTrials->reset();

    Sleep(1000);  // 1s pause to load the parameters in QT varaibles.

    if (pathList.isEmpty()){
        QMessageBox msgBox;
        msgBox.setWindowTitle("Error");
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setText("Configuration file is not loaded");
        msgBox.exec();
        return;
    }

    if (ui->tab_widget->currentIndex() == 0){
        QMessageBox mBox;
        mBox.setWindowTitle("Error");
        mBox.setIcon(QMessageBox::Critical);
        mBox.setText("Select the right tab corresponding to the stimulated whisker and press again");
        mBox.exec();
        return;
    }

    int nTrials = numberOfTrials.toInt();
    for (int trial = 0; trial < nTrials; trial++)
    {
        // Make a seperate directory to store images for every trial.
        QString path;
        QString modifiedPath;

        if (ui->tab_widget->currentIndex() == 1)
        {
            counter_Alpha += 1;
            path = pathList.at(1);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_Alpha).c_str());
        }

        if (ui->tab_widget->currentIndex() == 2)
        {
            counter_A1 += 1;
            path = pathList.at(2);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_A1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 3)
        {
            counter_A2 += 1;
            path = pathList.at(3);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_A2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 4)
        {
            counter_A3 += 1;
            path = pathList.at(4);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_A3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 5)
        {
            counter_A4 += 1;
            path = pathList.at(5);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_A4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 6)
        {
            counter_Beta += 1;
            path = pathList.at(6);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_Beta).c_str());
        }

        if (ui->tab_widget->currentIndex() == 7)
        {
            counter_B1 += 1;
            path = pathList.at(7);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_B1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 8)
        {
            counter_B2 += 1;
            path = pathList.at(8);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_B2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 9)
        {
            counter_B3 += 1;
            path = pathList.at(9);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_B3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 10)
        {
            counter_B4 += 1;
            path = pathList.at(10);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_B4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 11)
        {
            counter_Gamma += 1;
            path = pathList.at(11);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_Gamma).c_str());
        }

        if (ui->tab_widget->currentIndex() == 12)
        {
            counter_C1 += 1;
            path = pathList.at(12);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_C1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 13)
        {
            counter_C2 += 1;
            path = pathList.at(13);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_C2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 14)
        {
            counter_C3 += 1;
            path = pathList.at(14);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_C3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 15)
        {
            counter_C4 += 1;
            path = pathList.at(15);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_C4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 16)
        {
            counter_Delta += 1;
            path = pathList.at(16);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_Delta).c_str());
        }

        if (ui->tab_widget->currentIndex() == 17)
        {
            counter_D1 += 1;
            path = pathList.at(17);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_D1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 18)
        {
            counter_D2 += 1;
            path = pathList.at(18);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_D2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 19)
        {
            counter_D3 += 1;
            path = pathList.at(19);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_D3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 20)
        {
            counter_D4 += 1;
            path = pathList.at(20);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_D4).c_str());
        }

        if (ui->tab_widget->currentIndex() == 21)
        {
            counter_E1 += 1;
            path = pathList.at(21);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_E1).c_str());
        }

        if (ui->tab_widget->currentIndex() == 22)
        {
            counter_E2 += 1;
            path = pathList.at(22);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_E2).c_str());
        }

        if (ui->tab_widget->currentIndex() == 23)
        {
            counter_E3 += 1;
            path = pathList.at(23);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_E3).c_str());
        }

        if (ui->tab_widget->currentIndex() == 24)
        {
            counter_E4 += 1;
            path = pathList.at(24);
            path = path.append("Trial");
            modifiedPath = path.append(std::to_string(counter_E4).c_str());
        }

        QString imgSeqPath = makedir (modifiedPath);

        worker->abort();
        thread->wait();

        worker->requestWork();

        int grabresult = grabsequence(imgSeqPath, phaseCamera, durationHighCamera, amplitudeHighCamera,
                                      durationLowCamera, amplitudeLowCamera, phaseStimulator, durationHighStimulator, amplitudeHighStimulator,
                                      durationLowStimulator, amplitudeLowStimulator, amplitudeNegHighStimulator);
		if (grabresult != 0)
		{
			break; 
		}

        int progress = ((trial + 1) * (100/ nTrials));
        on_progressBar_numberTrials_valueChanged(progress);

        Sleep(60000); // 60s pause between trials
    }

}

void MainWindow::on_progressBar_numberTrials_valueChanged(int value)
{
    ui->progressBar_numberTrials->setValue(value);
}
